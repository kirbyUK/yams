#!/usr/bin/perl -w
use Getopt::Long;
use JSON qw/encode_json decode_json/;
use POSIX qw/mkfifo :sys_wait_h/;
use strict;

sub usage;
sub main;
sub download;

# The path to the player to use: 
my $player = "/usr/bin/mpv";

# Additional options to pass to the player:
my $player_options = "";

# The path to the downloader (most likely youtube-dl) to use:
my $downloader = "/usr/bin/youtube-dl";

# Additional options to pass to the downloader:
my $downloader_options = "";

# Path to the named pipe:
my $DEFAULT_PIPE="./yams-pipe";
my $pipe = $DEFAULT_PIPE;

# Path to the JSON buckets file:
my $buckets = "./buckets.json";

# Verbose flag:
my $verbose = 0;

# Help flag:
my $help = 0;

# Process command-line options:
GetOptions(
	"help" => \$help,
	"verbose" => \$verbose,
	"player=s" => \$player,
	"player-options=s" => \$player_options,
	"downloader=s" => \$downloader,
	"dowloader-options=s" => \$downloader_options,
	"pipe=s" => \$pipe,
	"buckets=s" => \$buckets,
);

if($help) { usage } else { main }

sub main
{
	# Verify the two executables given:
	die "'$player' is not an executable\n" unless(-f -x $player);
	die "'$downloader' is not an executable\n" unless(-f -x $downloader);

	# If a non-existant pipe is given (including the default), make a new one:
	my @pids;
	while(1)
	{
		unless(-p $pipe)
		{
			# Make a new pipe if there isn't one (see 'perldoc perlipc'):
			unlink $pipe or warn "Cannot unlink '$pipe': $!\n";
			mkfifo($pipe, 0700) or die "Cannot make pipe '$pipe': $!\n";
		}

		# Read in from the pipe:
		open my $ph, '<', $pipe or die "Cannot open pipe '$pipe': $!\n";
		chomp(my $line = <$ph>);
		close $ph;

		# Print received command if verbose output is specified:
		print "Received: '$line'\n" if($verbose);

		# Check what the given command is:
		if($line =~ /^download (.*)$/)
		{
			# We assume the URL given is correct, the server can do it (or I
			# can add it later when I'm feeling less lazy):
			my $url = $1;

			# Fork the process:
			my $pid = fork;
			push @pids, $pid;

			if(! defined $pid)
			{
				die "Cannot fork: $!\n";
			}
			# Child process:
			elsif($pid == 0)
			{
				exit download($url);
			}
		}

		# Cleanup any finished PIDs:
		@pids = grep { waitpid($_, WNOHANG) <= 0 } @pids;
	}
}

# Downloads the given URL using the global downloader and options, then updates
# the buckets if everything worked. Returns the status of the downloader:
sub download
{
	my $url = shift;

	# Construct the arguments:
	my @args = split(',', $downloader_options);
	push @args, $url;

	# Print the full command if verbose output is enabled:
	print $downloader, " ", join(' ', @args), "\n" if($verbose);

	# Execute the command:
	my $status = system($downloader, @args);

	if($status == 0)
	{
		print "Download of '$url' successful\n" if($verbose);
		# update the buckets...
	}
	else
	{
		warn "Download of '$url' failed with status '$?'\n";
	}

	return $status;
}

sub usage
{
	print "./yams [OPTIONS]\n\n";
	print "Options:\n";
	print "\t-h or --help\t\t\tDisplay this message\n";
	print "\t-v or --verbose\t\t\tGive verbose output\n\n";
	print "\t--player=PATH\t\t\tUse PATH as the media player\n";
	print "\t\t\t\t\t\t(Default is /usr/bin/mpv)\n\n";
	print "\t--player-options=ARGS\t\tWhere ARGS is a comma-seperated list of\n";
	print "\t\t\t\t\targuments to pass to the player\n\n";
	print "\t--downloader=PATH\t\tUse PATH to download requested media\n";
	print "\t\t\t\t\t\t(Default is /usr/bin/youtube-dl)\n\n";
	print "\t--downloaded-options=ARGS\tWhere ARGS is a comma-seperated list of\n";
	print "\t\t\t\t\targuments to pass to the downloader\n\n";
	print "\t--pipe=PATH\t\t\tUse PATH as the named pipe (fifo)\n";
	print "\t\t\t\t\t\t(Default is to use/create one\n";
	print "\t\t\t\t\t\tin the directory yams is\n";
	print "\t\t\t\t\t\trun from called '$DEFAULT_PIPE')\n\n";
	print "\t--bucket=PATH\t\t\tUse PATH as the bucket file\n";
	print "\t\t\t\t\t\t(Default is ./buckets.json)\n";
	print "Examples\n";
	print "\tUse mplayer2 with direct rendering and looping the video twice:\n";
	print "\t./yams --player='/usr/bin/mplayer2' --player-options='--dr,--loop=2'\n\n";
	print "\tEnds the playback after 9 minutes and 6 seconds:\n";
	print "\t./yams --player-options='--end=00:09:06'\n";
}
